// Code generated by protoc-gen-go-asynqgen. DO NOT EDIT.
// versions:
// protoc-gen-go-asynqgen v1.0.10

package example

import (
	context "context"
	json "encoding/json"
	asynq "github.com/hibiken/asynq"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

import (
	"fmt"
	"net/http"
	"myasynq"
	"strings"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/attribute"
	rkgrpcctx "github.com/rookie-ninja/rk-grpc/v2/middleware/context"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the asynq package it is being compiled against.
var _ = new(context.Context)
var _ = new(asynq.Task)
var _ = new(emptypb.Empty)
var _ = new(proto.Message)
var _ = new(json.InvalidUTF8Error)

type UserJobServer interface {
	CreateUser(context.Context, *CreateUserPayload) error
	UpdateUser(context.Context, *UpdateUserPayload) error
}

func RegisterUserJobServer(mux *asynq.ServeMux, srv UserJobServer) {
	mux.HandleFunc("user:create", _User_CreateUser_Job_Handler(srv))
	mux.HandleFunc("user:update", _User_UpdateUser_Job_Handler(srv))
}

func _User_CreateUser_Job_Handler(srv UserJobServer) func(context.Context, *asynq.Task) error {
	return func(ctx context.Context, task *asynq.Task) error {
		var in CreateUserPayload
		t := &myasynq.TaskPaylod{In: &in}
		if err := json.Unmarshal(task.Payload(), &t); err != nil {
			return fmt.Errorf("%s req=%s err=%s", task.Type(), t, err)
		}
		ctx, span := myasynq.NewSpan(ctx, "CreateUser")
		err := srv.CreateUser(ctx, t.In.(*CreateUserPayload))
		span.SetAttributes(attribute.String("req", myasynq.ToMarshal(t)))
		myasynq.EndSpan(span, err == nil)
		return err
	}
}

func _User_UpdateUser_Job_Handler(srv UserJobServer) func(context.Context, *asynq.Task) error {
	return func(ctx context.Context, task *asynq.Task) error {
		var in UpdateUserPayload
		t := &myasynq.TaskPaylod{In: &in}
		if err := json.Unmarshal(task.Payload(), &t); err != nil {
			return fmt.Errorf("%s req=%s err=%s", task.Type(), t, err)
		}
		ctx, span := myasynq.NewSpan(ctx, "UpdateUser")
		err := srv.UpdateUser(ctx, t.In.(*UpdateUserPayload))
		span.SetAttributes(attribute.String("req", myasynq.ToMarshal(t)))
		myasynq.EndSpan(span, err == nil)
		return err
	}
}

type UserSvcJob struct{}

var UserJob UserSvcJob

func (j *UserSvcJob) CreateUser(ctx context.Context, in *CreateUserPayload, opts ...asynq.Option) (*asynq.Task, *http.Header, error) {
	// get trace metadata
	header := http.Header{}
	rkgrpcctx.GetTracerPropagator(ctx).Inject(ctx, propagation.HeaderCarrier(header))
	payload, err := json.Marshal(myasynq.TaskPaylod{
		In:          in,
		TraceHeader: header,
	})
	if err != nil {
		return nil, nil, err
	}

	task := asynq.NewTask("user:create", payload, opts...)
	return task, &header, nil
}

func (j *UserSvcJob) UpdateUser(ctx context.Context, in *UpdateUserPayload, opts ...asynq.Option) (*asynq.Task, *http.Header, error) {
	// get trace metadata
	header := http.Header{}
	rkgrpcctx.GetTracerPropagator(ctx).Inject(ctx, propagation.HeaderCarrier(header))
	payload, err := json.Marshal(myasynq.TaskPaylod{
		In:          in,
		TraceHeader: header,
	})
	if err != nil {
		return nil, nil, err
	}

	task := asynq.NewTask("user:update", payload, opts...)
	return task, &header, nil
}

type UserJobClient interface {
	CreateUser(ctx context.Context, req *CreateUserPayload, opts ...asynq.Option) (info *asynq.TaskInfo, err error)
	UpdateUser(ctx context.Context, req *UpdateUserPayload, opts ...asynq.Option) (info *asynq.TaskInfo, err error)
}

type UserJobClientImpl struct {
	cc *asynq.Client
}

func NewUserJobClient(client *asynq.Client) UserJobClient {
	return &UserJobClientImpl{client}
}

func (c *UserJobClientImpl) CreateUser(ctx context.Context, in *CreateUserPayload, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	task, header, err := UserJob.CreateUser(ctx, in, opts...)
	if err != nil {
		return nil, fmt.Errorf("ServerA_TaskJob.GameTest_Task req:%s err:%s", in, err)
	}
	info, err := c.cc.Enqueue(task)
	if err != nil {
		return nil, fmt.Errorf("ServerA_TaskJob.GameTest_Task Enqueue req:%s err:%s", in, err)
	}
	// 把 Trace 信息，存入 Metadata，以 Header 的形式返回给 httpclient
	for k, v := range *header {
		rkgrpcctx.AddHeaderToClient(ctx, k, strings.Join(v, ","))
	}
	return info, nil
}

func (c *UserJobClientImpl) UpdateUser(ctx context.Context, in *UpdateUserPayload, opts ...asynq.Option) (*asynq.TaskInfo, error) {
	task, header, err := UserJob.UpdateUser(ctx, in, opts...)
	if err != nil {
		return nil, fmt.Errorf("ServerA_TaskJob.GameTest_Task req:%s err:%s", in, err)
	}
	info, err := c.cc.Enqueue(task)
	if err != nil {
		return nil, fmt.Errorf("ServerA_TaskJob.GameTest_Task Enqueue req:%s err:%s", in, err)
	}
	// 把 Trace 信息，存入 Metadata，以 Header 的形式返回给 httpclient
	for k, v := range *header {
		rkgrpcctx.AddHeaderToClient(ctx, k, strings.Join(v, ","))
	}
	return info, nil
}
